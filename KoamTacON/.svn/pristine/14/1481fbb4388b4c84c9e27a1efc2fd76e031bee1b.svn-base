package com.aisolution.koamtacon.service.service;

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.aisolution.common.util.CommonUtils;
import com.aisolution.koamtacon.mapper.service.UserManagementMapper;

@Service
public class UserManagementServiceImpl implements UserManagementService {
	private static final Logger log = LoggerFactory.getLogger(UserManagementServiceImpl.class);
	
	@Autowired
	private UserManagementMapper userManagementMapper;
	
	public Map<String, Object> getOwnerList(Map<String, String> paramMap) {
		log.debug("getOwnerList paramMap={}", paramMap);
		
		Map<String, Object> map = CommonUtils.setParamsWithPaging(paramMap);
		log.debug("getOwnerList map={}", map);
		
		map.put("pageInfo", CommonUtils.getPageInfo(paramMap, userManagementMapper.getOwnerListCount(map)));
		map.put("list", userManagementMapper.getOwnerList(map));
		
		return map;
	}
	
	public Map<String, Object> getUserInfoList(Map<String, String> paramMap) {
		log.debug("getUserInfo paramMap={}", paramMap);
		
		int itemNoPerPage = Integer.parseInt(paramMap.get("itemNoPerPage"));
		int curPage = Integer.parseInt(paramMap.get("curPage"));
		int offset = itemNoPerPage * (curPage - 1);
		
		Map<String, Object> map = CommonUtils.setParams(paramMap);
		//map.put("cbActivationYn", paramMap.get("cbActivationYn").toString());
		//map.put("cbJoinDate", paramMap.get("cbJoinDate").toString());
		//map.put("cbSearchField", paramMap.get("cbSearchField").toString());
		//map.put("sKeyword", paramMap.get("sKeyword").toString());
		map.put("itemNoPerPage", itemNoPerPage);
		map.put("offset", offset);
		log.debug("getUserInfoList map={}", map);
		
		map.put("pageInfo", CommonUtils.getPageInfo(paramMap, userManagementMapper.getUserInfoListCount(map)));
		map.put("userInfoList", userManagementMapper.getUserInfoList(map));
		
		return map;
	}
	
	public List<Map<String, Object>> getUserInfoListForExcel(Map<String, String> paramMap) {
		log.debug("getUserInfoListForExcel paramMap={}", paramMap);
		return userManagementMapper.getUserInfoListForExcel(paramMap);
	}
	
	public void updateUserInfo(Map<String, String> paramMap) {
		log.debug("updateUserInfo paramMap={}", paramMap);
		userManagementMapper.updateUserInfo(paramMap);
	}
	
	public Map<String, Object> getAdminInfoList(Map<String, String> paramMap) {
		log.debug("getAdminInfoList paramMap={}", paramMap);
		
		int itemNoPerPage = Integer.parseInt(paramMap.get("itemNoPerPage"));
		int curPage = Integer.parseInt(paramMap.get("curPage"));
		int offset = itemNoPerPage * (curPage - 1);
		
		Map<String, Object> map = CommonUtils.setParams(paramMap);
		//map.put("sUser", paramMap.get("sUser"));
		map.put("itemNoPerPage", itemNoPerPage);
		map.put("offset", offset);
		
		map.put("pageInfo", CommonUtils.getPageInfo(paramMap, userManagementMapper.getAdminInfoListCount(map)));
		map.put("adminInfoList", userManagementMapper.getAdminInfoList(map));
		
		return map;
	}
	
	public void updateAdminInfo(Map<String, String> paramMap) {
		log.debug("updateAdminInfo paramMap={}", paramMap);
		userManagementMapper.updateAdminInfo(paramMap);
	}
	
	public Map<String, Object> getGroupList(Map<String, String> paramMap) {
		log.debug("getGroupList paramMap={}", paramMap);
		
		int itemNoPerPage = Integer.parseInt(paramMap.get("itemNoPerPage"));
		int curPage = Integer.parseInt(paramMap.get("curPage"));
		int offset = itemNoPerPage * (curPage - 1);
		
		Map<String, Object> map = CommonUtils.setParams(paramMap);
		map.put("itemNoPerPage", itemNoPerPage);
		map.put("offset", offset);
		
		map.put("pageInfo", CommonUtils.getPageInfo(paramMap, userManagementMapper.getGroupListCount(map)));
		map.put("groupList", userManagementMapper.getGroupList(map));
		
		return map;
	}
	
	public List<Map<String, Object>> getGroupListForExcel(Map<String, String> paramMap) {
		log.debug("getGroupListForExcel paramMap={}", paramMap);
		return userManagementMapper.getGroupListForExcel(paramMap);
	}
	
	public Map<String, Object> getMemberList(Map<String, String> paramMap) {
		log.debug("getMemberList paramMap={}", paramMap);
		
		int itemNoPerPage = Integer.parseInt(paramMap.get("itemNoPerPage"));
		int curPage = Integer.parseInt(paramMap.get("curPage"));
		int offset = itemNoPerPage * (curPage - 1);
		
		Map<String, Object> map = CommonUtils.setParams(paramMap);
		map.put("itemNoPerPage", itemNoPerPage);
		map.put("offset", offset);
		
		map.put("pageInfo", CommonUtils.getPageInfo(paramMap, userManagementMapper.getMemberListCount(map)));
		map.put("memberList", userManagementMapper.getMemberList(map));
		
		return map;
	}
	
	public List<Map<String, Object>> getMemberListForExcel(Map<String, String> paramMap) {
		log.debug("getMemberListForExcel paramMap={}", paramMap);
		return userManagementMapper.getMemberListForExcel(paramMap);
	}
	
	public Map<String, Object> getUserInfo(Map<String, String> paramMap) {
		log.debug("getUserInfo paramMap={}", paramMap);
		return userManagementMapper.getUserInfo(paramMap);
	}
	
	public void updateSendYn(Map<String, String> paramMap) {
		log.debug("updateSendYn paramMap={}", paramMap);
		userManagementMapper.updateSendYn(paramMap);
	}
	
	public List<Map<String, Object>> getNotSendMemberList(Map<String, String> paramMap) {
		log.debug("getNotSendMemberList paramMap={}", paramMap);
		return userManagementMapper.getNotSendMemberList(paramMap);
	}
	
	public void activateUser(Map<String, String> paramMap) {
		log.debug("activateUser paramMap={}", paramMap);
		userManagementMapper.activateUser(paramMap);
	}
	
	public Map<String, Object> getDemoAccountsList(Map<String, String> paramMap) {
		log.debug("getDemoAccountsList paramMap={}", paramMap);
		
		int itemNoPerPage = Integer.parseInt(paramMap.get("itemNoPerPage"));
		int curPage = Integer.parseInt(paramMap.get("curPage"));
		int offset = itemNoPerPage * (curPage - 1);
		
		Map<String, Object> map = CommonUtils.setParams(paramMap);
		map.put("itemNoPerPage", itemNoPerPage);
		map.put("offset", offset);
		
		map.put("pageInfo", CommonUtils.getPageInfo(paramMap, userManagementMapper.getDemoAccountsListCount(map)));
		map.put("demoAccountsList", userManagementMapper.getDemoAccountsList(map));
		
		return map;
	}
	
	public List<Map<String, Object>> getDemoAccountsListForExcel(Map<String, String> paramMap) {
		log.debug("getDemoAccountsListForExcel paramMap={}", paramMap);
		return userManagementMapper.getDemoAccountsListForExcel(paramMap);
	}
	
	public Map<String, Object> getDemoAccount(Map<String, String> paramMap) {
		log.debug("getDemoAccount paramMap={}", paramMap);
		return userManagementMapper.getDemoAccount(paramMap);
	}
	
	public void updateDemoAccount(Map<String, String> paramMap) {
		log.debug("updateDemoAccount paramMap={}", paramMap);
		userManagementMapper.updateDemoAccount(paramMap);
	}
	
	public Map<String, Object> getDemoAccountInfo(Map<String, String> paramMap) {
		log.debug("getDemoAccountInfo paramMap={}", paramMap);
		return userManagementMapper.getDemoAccountInfo(paramMap);
	}
	
	public void updateDemoAccountStartDate(Map<String, String> paramMap) {
		log.debug("updateDemoAccountStartDate paramMap={}", paramMap);
		userManagementMapper.updateDemoAccountStartDate(paramMap);
	}
	
	public int getNumberOfMemberWithActivationCode(Map<String, String> paramMap) {
		log.debug("getNumberOfMemberWithActivationCode paramMap={}", paramMap);
		return userManagementMapper.getNumberOfMemberWithActivationCode(paramMap);
	}
}
